#!/bin/bash

set -e

if [[ -f /tmp/gui50 ]]; then
    cat /tmp/gui50
    exit 0
fi


function teardown() {
    pkill -P $$
    rm -f /tmp/gui50
}


trap "teardown &> /dev/null" ERR EXIT SIGINT SIGHUP

# Create virtual screen
DISPLAY="${DISPLAY:=:0}"
Xvfb "$DISPLAY" -screen 0 1280x720x16 -br &>> /tmp/xvfb.log &
PIDS="$PIDS $!"

# Start VNC server
X11VNC_PASSWORD="$(pwgen -s 16 1)"
x11vnc -cursor arrow -display "$DISPLAY" -forever -loop -noxfixes -noxrecord -noxdamage -passwd "$X11VNC_PASSWORD" -xkb -shared &>> /tmp/x11vnc.log &
PIDS="$PIDS $!"

# Wait until VNC server is listening
retries=10
until netstat -tulpn | grep -q 5900 || [[ $retries -eq 0 ]]; do
    sleep 1
    retries=$(( retries - 1 ))
done

if [[ $retries -eq 0 ]]; then
    >&2 echo "Timed out before x11vnc was listening on port 5900"
    exit 1
fi

# Start VNC client
NOVNC_PORT=8082
/opt/noVNC/utils/launch.sh --listen $NOVNC_PORT &>>/tmp/noVNC.log &
PIDS="$PIDS $!"

URL="$(hostname50 --protocol):$NOVNC_PORT/vnc.html?autoconnect=true&host=$(hostname50)&port=$NOVNC_PORT&password=$X11VNC_PASSWORD"
retries=5
until curl -fLs  "http://localhost:$NOVNC_PORT" &>/dev/null || [[ $retries -eq 0 ]]; do
    sleep 1
    retries=$(( retries - 1 ))
done

if [[ $retries -eq 0 ]]; then
    >&2 echo "Timed out before noVNC was listening on port $NOVNC_PORT"
    exit 2
fi

echo "$URL" | tee /tmp/gui50

# Block until a child process exits
wait -n $PIDS &>/dev/null
